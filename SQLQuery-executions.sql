select * from Customers
select * from Orders
select * from Products
select * from OrderDetails
select * from Inventory
------------------------------------------------TASK 2--------------------------------------------
--1.retrieve the names and emails of all customers--
select Customer_FirstName , Customer_Email from Customers

-- 2.list all orders with their order dates and corresponding customer names--
select Orders.Order_Date , Customers.Customer_FirstName from Orders
join Customers on Orders.Customer_id=Customers.Customer_id

----3.insert a new customer record into the "Customers" table. 
--Include customer information such as name, email, and address.
insert into Customers(Customer_id, Customer_FirstName, Customer_Email,Address) values 
(21,'vikas','vikas@gmail.com','abc street chennai')

---4.update price by 10%
update Products set Product_Price=Product_Price*1.10

---5.delete order details from orders and orderdetails --
delete from Orders where Order_id = 10

--with user input-
declare @Order_id int =20
delete from Orders where Order_id = @Order_id

--6.insert a new order into the "Orders" table. Include the customer ID,
--order date, and any other necessary information.
insert into Orders(Order_id,Customer_id,Order_Date,Total_Amount) values 
(22,18,'2023-03-21',1200)

--7.update the contact information (e.g., email and address) of a specific
--customer in customers table with input
declare @Customer_id int =3
declare @newemail varchar(100)='abc.@gmail.com'
declare @newaddress varchar(300)='xyz street kovai'
update Customers set Customer_Email=@newemail , Address=@newaddress where Customer_id=@Customer_id

--8

--9.delete all orders and their associated order details for a specific
--customer from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID
--as a parameter
declare @cusid int =8
delete from Orders where Customer_id=@cusid

--10.insert a new electronic gadget product into the "Products" table,
--including product name, category, price, and any other relevant details.

insert into Products(Product_id,Product_Name,Product_description,Product_Price) values 
(21 ,'iphone 16' ,'High quality camera , data integrity', 60000)

--11. update the status of a specific order in the "Orders" table (e.g., from
--"Pending" to "Shipped"). Allow users to input the order ID and the new status.

alter table Orders add Status varchar(100)
update Orders set Status='Pending' where Order_id=2
declare @orderid int =2
declare @status varchar(100)='Shipped'
update Orders set Status=@status where Order_id=@orderid

--12.calculate and update the number of orders placed by each customer
--in the "Customers" table based on the data in the "Orders" table.
alter table Customers add Order_Count int default 0
update Customers set Order_Count =( select count(*) from Orders where Orders.Customer_id=Customers.Customer_id)

----------------------------------------------TASK 3-------------------------------------------
--1.retrieve a list of all orders along with customer information (e.g.,
--customer name) for each order.

select Orders.Order_id, Orders.Order_Date ,Orders.Total_Amount,
  Customers.Customer_id, Customers.Customer_FirstName,Customers.Customer_LastName from Orders  
  join Customers on Orders.Customer_id=Customers.Customer_id

--2.find the total revenue generated by each electronic gadget product.
--Include the product name and the total revenue.

select P.Product_Name, sum(OD.Quantity * P.Product_Price) as Total_Revenue from OrderDetails OD
join Products P on OD.Product_id=P.Product_id
group by P.Product_Name order by Total_Revenue desc


---3.list all customers who have made at least one purchase. Include their
--names and contact information

select C.Customer_id,C.Customer_FirstName, C.Customer_LastName, C.Customer_Email, C.Customer_Phone, C.Address
from Customers C
join Orders O ON C.Customer_id = O.Customer_id
group by C.Customer_id, C.Customer_FirstName, C.Customer_LastName, C.Customer_Email, C.Customer_Phone, C.Address;

--4. find the most popular electronic gadget, which is the one with the highest

select top 1 P.Product_Name , sum(OD.Quantity) as Total_Quantity_Order from Products P
join OrderDetails OD on P.Product_id=OD.Product_id
group by P.Product_Name
order by Total_Quantity_Order desc

--5.retrieve a list of electronic gadgets along with their corresponding categories.

 select Product_Name ,Product_Description from Products

 --6.calculate the average order value for each customer. Include the
--customer's name and their average order value.

 select c.customer_firstname, c.customer_lastname, avg(o.total_amount) as avg_order_value 
from customers c 
join orders o on c.customer_id = o.customer_id 
group by c.customer_id, c.customer_firstname, c.customer_lastname;

--7.o find the order with the highest total revenue. Include the order ID,
--customer information, and the total revenue.

select O.Order_id, C.Customer_FirstName , C.Customer_LastName, O.Total_Amount from Customers C
join Orders O on O.Customer_id=C.Customer_id
order by O.Total_Amount desc

--8. list electronic gadgets and the number of times each product has been ordered.

select p.product_name, count(od.product_id) as times_ordered 
from products p 
join orderdetails od on p.product_id = od.product_id 
group by p.product_name 
order by times_ordered desc;

--9.find customers who have purchased a specific electronic gadget product.
--Allow users to input the product name as a parameter.

declare @product varchar(1000) ='SmartWatch'
select C.Customer_FirstName,C.Customer_id,C.Customer_Phone from Customers C
join Orders o on c.Customer_id=o.Customer_id
join OrderDetails OD on Od.Order_id=o.Order_id
join Products P on P.Product_id=OD.Product_id
where p.Product_Name=@product

--10.calculate the total revenue generated by all orders placed within a
--specific time period. Allow users to input the start and end dates as parameters.

declare @start_date date;
declare @end_date date;

set @start_date = '2024-01-01';
set @end_date = '2024-12-31';

select sum(od.quantity * p.product_price) as total_revenue
from orders o
join orderdetails od on o.order_id = od.order_id
join products p on od.product_id = p.product_id
where o.order_date between @start_date and @end_date;

-----------------------------------------------------------------------------TASK 3------------------------------------------------------------

--1.
select * from Customers
select * from Orders
select * from OrderDetails
select * from Products
select * from Inventory
--1.find out which customers have not placed any orders.
select c.Customer_id, c.Customer_FirstName from Customers c
where c.Customer_id not in(select o.Customer_id from Orders o)

--2.o find the total number of products available for sale. 
select (select count(*) from Products) as Total_products

--3. calculate the total revenue generated by TechShop
select (select sum(Total_Amount)  from Orders)as Total_Revenue


--4.calculate the average quantity ordered for products in a specific category.
--Allow users to input the category name as a parameter

 select avg(Quantity) from OrderDetails 
 where Product_id in(select Product_id from Products where Product_Name='SmartWatch')
 
 --5.o calculate the total revenue generated by a specific customer. Allow users
--to input the customer ID as a parameter
select sum(Total_Amount)  as Total_revenue from Orders
where Customer_id=(select Customer_id from Customers where Customer_id=4)

--6 find the customers who have placed the most orders. List their names
--and the number of orders they've placed.
select c.Customer_FirstName from Customers c
where c.Customer_id in(select Order_id from Orders where Orders.Customer_id=c.Customer_id)


--7. find the most popular product category, which is the one with the highest
--total quantity ordered across all orders.
SELECT p.Product_Name, sum(od.Quantity) AS Total_Quantity_Ordered
FROM OrderDetails od
JOIN Products p ON od.Product_id = p.Product_id
GROUP BY p.Product_Name
ORDER BY Total_Quantity_Ordered DESC

---8.o find the customer who has spent the most money (highest total revenue)
--on electronic gadgets. List their name and total spending.
select top 1 c.Customer_FirstName , max(o.Total_amount) as HIghest_revenue 
from Customers c join Orders o on o.Customer_id=c.Customer_id
group by c.Customer_FirstName
order by HIghest_revenue desc

--9.to calculate the average order value (total revenue divided by the number of
--orders) for all customers
select c.Customer_id,c.Customer_FirstName,avg(o.Total_amount) as Total_revenue
from Customers c
join Orders o on o.Customer_id=c.Customer_id
group by c.Customer_id,c.Customer_FirstName

select * from Orders
--10.to find the total number of orders placed by each customer and list their
--names along with the order count.

select c.Customer_id,c.Customer_FirstName , count(o.order_id) as Tot_orders
from Customers c
join Orders o on o.Customer_id=c.Customer_id
group by c.Customer_id,c.Customer_FirstName

